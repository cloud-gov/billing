// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customer.sql

package db

import (
	"context"
)

const createCustomer = `-- name: CreateCustomer :one
WITH cust AS (
  INSERT INTO customer (
    name
  )
  VALUES ($1)
  RETURNING id
),
types AS (
  SELECT id
  FROM account_type
),
accts AS (
  INSERT INTO account (customer_id, type)
  SELECT cust.id, types.id
  FROM cust CROSS JOIN types
)
SELECT id
FROM cust
`

// CreateCustomer adds a customer to the database and creates Accounts for the customer for every AccountType available. Returns the ID of the new Customer.
func (q *Queries) CreateCustomer(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRow(ctx, createCustomer, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customer
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, name, tier_id FROM customer
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(&i.ID, &i.Name, &i.TierID)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, name, tier_id FROM customer
ORDER BY name
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(&i.ID, &i.Name, &i.TierID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customer
  set name = $2
WHERE id = $1
`

type UpdateCustomerParams struct {
	ID   int64
	Name string
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.Exec(ctx, updateCustomer, arg.ID, arg.Name)
	return err
}
