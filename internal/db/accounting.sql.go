// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: accounting.sql

package db

import (
	"context"
)

const accountingEquation = `-- name: AccountingEquation :many

SELECT string_agg(name, ' + ') AS expression
FROM account_type
WHERE id % 100 = 0
GROUP BY id, normal
`

// Accounting contains convenience queries that may not have practical use in the application.
// Output the two sides of the standard accounting equation as two rows, for all defined top-level account types. For instance, if only 'liabilities' and 'expenses' are defined, the output is
//
//	liabilities
//	expenses
func (q *Queries) AccountingEquation(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, accountingEquation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var expression string
		if err := rows.Scan(&expression); err != nil {
			return nil, err
		}
		items = append(items, expression)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
