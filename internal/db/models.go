// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

// TransactionType explains why the transaction was made. Each means:
//   - iaa_pop_start: The IAA Period of Performance started.
//   - iaa_pop_end: The IAA Period of Performance ended.
//   - usage_post: Customer usage of was posted, i.e. their account balance was updated to reflect their usage.
type TransactionType string

const (
	TransactionTypeIaaPopStart TransactionType = "iaa_pop_start"
	TransactionTypeIaaPopEnd   TransactionType = "iaa_pop_end"
	TransactionTypeUsagePost   TransactionType = "usage_post"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType
	Valid           bool // Valid is true if TransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionType), nil
}

type Account struct {
	ID         int32
	CustomerID pgtype.Int8
	Type       pgtype.Int4
}

type AccountType struct {
	ID     int32
	Name   string
	Normal pgtype.Int4
}

type CFOrg struct {
	ID         pgtype.UUID
	Name       pgtype.Text
	CustomerID pgtype.Int8
}

type Customer struct {
	ID     int64
	Name   string
	TierID pgtype.Int4
}

type Entry struct {
	TransactionID int32
	AccountID     int32
	Amount        pgtype.Numeric
	Direction     pgtype.Int4
}

type Measurement struct {
	ReadingID         int32
	Meter             string
	ResourceNaturalID string
	Value             int32
}

// A Meter reads usage information from a system in Cloud.gov. It also namespaces natural IDs for resources and resource_kinds; meter + natural_id is a primary key.
type Meter struct {
	Name string
}

type Reading struct {
	ID        int32
	CreatedAt pgtype.Timestamp
	// Periodic is true if a reading was taken automatically as part of the periodic usage measurement schedule, or false if it was requested manually.
	Periodic bool
}

type Resource struct {
	Meter         string
	NaturalID     string
	KindNaturalID string
	CFOrgID       pgtype.UUID
}

// ResourceKind represents a particular kind of billable resource. Note that natural_id can be empty because some meters may only read one kind of resource, and that resource kind may not have a unique identifier in the target system; it is uniquely identified by the meter name only.
type ResourceKind struct {
	Meter         string
	NaturalID     string
	Credits       pgtype.Int4
	Amount        pgtype.Int4
	UnitOfMeasure pgtype.Text
}

type Tier struct {
	ID          int32
	Name        string
	TierCredits int64
}

type Transaction struct {
	ID          int32
	OccurredAt  pgtype.Timestamp
	Description pgtype.Text
	Type        TransactionType
}
