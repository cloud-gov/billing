// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	// Accounting contains convenience queries that may not have practical use in the application.
	// Output the two sides of the standard accounting equation as two rows, for all defined top-level account types. For instance, if only 'liabilities' and 'expenses' are defined, the output is
	//   liabilities
	//   expenses
	AccountingEquation(ctx context.Context) ([]string, error)
	// BoundsMonthPrev calculates bounds that encapsulate the month previous to the parameter, as_of. The first bound is inclusive and the second is exclusive.
	BoundsMonthPrev(ctx context.Context, asOf pgtype.Timestamptz) (BoundsMonthPrevRow, error)
	// BulkCreateCFOrgs creates CFOrg rows in bulk with the minimum required columns. If a row with the given primary key already exists, that input item is ignored.
	BulkCreateCFOrgs(ctx context.Context, ids []pgtype.UUID) error
	BulkCreateMeasurement(ctx context.Context, arg BulkCreateMeasurementParams) error
	// BulkCreateMeters creates Meter rows in bulk with the minimum required columns. If a row with the given primary key already exists, that input item is ignored.
	BulkCreateMeters(ctx context.Context, names []string) error
	// BulkCreateResourceKinds creates ResourceKind rows in bulk with the minimum required columns. If a row with the given primary key already exists, that input item is ignored.
	// The bulk insert pattern using multiple arrays is sourced from: https://github.com/sqlc-dev/sqlc/issues/218#issuecomment-829263172
	BulkCreateResourceKinds(ctx context.Context, arg BulkCreateResourceKindsParams) error
	// BulkCreateResources creates Resource rows in bulk with the minimum required columns. If a row with the given primary key already exists, that input item is ignored.
	// The bulk insert pattern using multiple arrays is sourced from: https://github.com/sqlc-dev/sqlc/issues/218#issuecomment-829263172
	BulkCreateResources(ctx context.Context, arg BulkCreateResourcesParams) error
	CreateCFOrg(ctx context.Context, arg CreateCFOrgParams) (CFOrg, error)
	// CreateCustomer adds a customer to the database and creates Accounts for the customer for every AccountType available. Returns the ID of the new Customer.
	CreateCustomer(ctx context.Context, name string) (int64, error)
	CreateMeasurement(ctx context.Context, arg CreateMeasurementParams) (Measurement, error)
	CreateMeasurements(ctx context.Context, arg []CreateMeasurementsParams) (int64, error)
	CreateMeter(ctx context.Context, name string) (string, error)
	CreatePriceWithID(ctx context.Context, arg CreatePriceWithIDParams) (Price, error)
	CreateReading(ctx context.Context, arg CreateReadingParams) (Reading, error)
	CreateReadingWithID(ctx context.Context, arg CreateReadingWithIDParams) (Reading, error)
	CreateResourceKind(ctx context.Context, arg CreateResourceKindParams) (ResourceKind, error)
	CreateResources(ctx context.Context, arg CreateResourcesParams) error
	CreateTier(ctx context.Context, arg CreateTierParams) (Tier, error)
	CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error)
	// CreateUniqueReading creates a Reading if one does not exist for the hour specified in created_at. It returns [pgx.ErrNoRows] if a Reading already exists.
	CreateUniqueReading(ctx context.Context, arg CreateUniqueReadingParams) (Reading, error)
	DeleteCFOrg(ctx context.Context, id pgtype.UUID) error
	DeleteCustomer(ctx context.Context, id int64) error
	DeleteResource(ctx context.Context, arg DeleteResourceParams) error
	DeleteResourceKind(ctx context.Context, arg DeleteResourceKindParams) error
	DeleteTier(ctx context.Context, id int32) error
	GetCFOrg(ctx context.Context, id pgtype.UUID) (CFOrg, error)
	GetCustomer(ctx context.Context, id int64) (Customer, error)
	GetEntry(ctx context.Context, arg GetEntryParams) (Entry, error)
	GetResourceKind(ctx context.Context, arg GetResourceKindParams) (ResourceKind, error)
	GetTier(ctx context.Context, id int32) (Tier, error)
	GetTransaction(ctx context.Context, id int32) (Transaction, error)
	ListCFOrgs(ctx context.Context) ([]CFOrg, error)
	ListCustomers(ctx context.Context) ([]Customer, error)
	ListMeasurements(ctx context.Context) ([]Measurement, error)
	ListResourceKind(ctx context.Context) ([]ResourceKind, error)
	ListResources(ctx context.Context) ([]Resource, error)
	ListTiers(ctx context.Context) ([]Tier, error)
	ListTransactions(ctx context.Context) ([]Transaction, error)
	ListTransactionsWide(ctx context.Context) ([]ListTransactionsWideRow, error)
	PostUsage(ctx context.Context, asOf pgtype.Timestamptz) ([]PostUsageRow, error)
	// SumEntries calculates the sum of all entries in the ledger. If the result is not 0, a transaction is imbalanced.
	SumEntries(ctx context.Context) ([]pgtype.Numeric, error)
	UpdateCFOrg(ctx context.Context, arg UpdateCFOrgParams) error
	UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error
	// UpdateMeasurementMicrocredits updates the amount of microcredits associated with measurements made in the month preceding as_of based on the prices that were valid for each resource_kind at the time of reading.
	UpdateMeasurementMicrocredits(ctx context.Context, asOf pgtype.Timestamptz) (pgtype.Int8, error)
	UpdateResource(ctx context.Context, arg UpdateResourceParams) error
	UpdateTier(ctx context.Context, arg UpdateTierParams) error
	// UpsertResource upserts a Resource and creates minimal rows in foreign tables -- namely meter, cf_org, and resource_kind -- to which Resource has foreign keys. Efficient for single inserts. For bulk inserts, review Bulk* functions.
	UpsertResource(ctx context.Context, arg UpsertResourceParams) (Resource, error)
}

var _ Querier = (*Queries)(nil)
