// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transaction.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
  transaction_date, resource_id, cf_org_id, description, direction, amount, transaction_type_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, transaction_date, resource_id, cf_org_id, description, direction, amount, transaction_type_id
`

type CreateTransactionParams struct {
	TransactionDate   sql.NullTime
	ResourceID        int32
	CFOrgID           uuid.UUID
	Description       sql.NullString
	Direction         sql.NullInt32
	Amount            int32
	TransactionTypeID int32
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.TransactionDate,
		arg.ResourceID,
		arg.CFOrgID,
		arg.Description,
		arg.Direction,
		arg.Amount,
		arg.TransactionTypeID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.TransactionDate,
		&i.ResourceID,
		&i.CFOrgID,
		&i.Description,
		&i.Direction,
		&i.Amount,
		&i.TransactionTypeID,
	)
	return i, err
}

const createTransactionType = `-- name: CreateTransactionType :one
INSERT INTO transaction_type (
  name
) VALUES (
  $1
)
RETURNING id, name
`

func (q *Queries) CreateTransactionType(ctx context.Context, name string) (TransactionType, error) {
	row := q.db.QueryRowContext(ctx, createTransactionType, name)
	var i TransactionType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteTransactionType = `-- name: DeleteTransactionType :exec
DELETE FROM transaction_type
WHERE id = $1
`

func (q *Queries) DeleteTransactionType(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTransactionType, id)
	return err
}

const getTransactionType = `-- name: GetTransactionType :one
SELECT id, name FROM transaction_type
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransactionType(ctx context.Context, id int32) (TransactionType, error) {
	row := q.db.QueryRowContext(ctx, getTransactionType, id)
	var i TransactionType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getTransactions = `-- name: GetTransactions :one
SELECT id, transaction_date, resource_id, cf_org_id, description, direction, amount, transaction_type_id FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransactions(ctx context.Context, id int32) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactions, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.TransactionDate,
		&i.ResourceID,
		&i.CFOrgID,
		&i.Description,
		&i.Direction,
		&i.Amount,
		&i.TransactionTypeID,
	)
	return i, err
}

const listTransactionType = `-- name: ListTransactionType :many
SELECT id, name FROM transaction_type
ORDER BY name
`

func (q *Queries) ListTransactionType(ctx context.Context) ([]TransactionType, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TransactionType
	for rows.Next() {
		var i TransactionType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, transaction_date, resource_id, cf_org_id, description, direction, amount, transaction_type_id FROM transactions
ORDER BY id
`

func (q *Queries) ListTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.TransactionDate,
			&i.ResourceID,
			&i.CFOrgID,
			&i.Description,
			&i.Direction,
			&i.Amount,
			&i.TransactionTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransactionType = `-- name: UpdateTransactionType :exec
UPDATE transaction_type
  set name = $2
  WHERE id = $1
`

type UpdateTransactionTypeParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateTransactionType(ctx context.Context, arg UpdateTransactionTypeParams) error {
	_, err := q.db.ExecContext(ctx, updateTransactionType, arg.ID, arg.Name)
	return err
}
