// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: resource_kind.sql

package db

import (
	"context"
)

const bulkCreateResourceKinds = `-- name: BulkCreateResourceKinds :exec
INSERT INTO resource_kind (meter, natural_id)
SELECT DISTINCT ON (r.meter, r.natural_id) meter, natural_id
FROM
  UNNEST(
    $1::text[],
    $2::text[]
  ) AS r(meter, natural_id)
ON CONFLICT (meter, natural_id) DO NOTHING
`

type BulkCreateResourceKindsParams struct {
	Meters     []string
	NaturalIds []string
}

// BulkCreateResourceKinds creates ResourceKind rows in bulk with the minimum required columns. If a row with the given primary key already exists, that input item is ignored.
// The bulk insert pattern using multiple arrays is sourced from: https://github.com/sqlc-dev/sqlc/issues/218#issuecomment-829263172
func (q *Queries) BulkCreateResourceKinds(ctx context.Context, arg BulkCreateResourceKindsParams) error {
	_, err := q.db.Exec(ctx, bulkCreateResourceKinds, arg.Meters, arg.NaturalIds)
	return err
}

const createResourceKind = `-- name: CreateResourceKind :one
INSERT INTO resource_kind (
  meter, natural_id
) VALUES (
  $1, $2
)
RETURNING meter, natural_id
`

type CreateResourceKindParams struct {
	Meter     string
	NaturalID string
}

func (q *Queries) CreateResourceKind(ctx context.Context, arg CreateResourceKindParams) (ResourceKind, error) {
	row := q.db.QueryRow(ctx, createResourceKind, arg.Meter, arg.NaturalID)
	var i ResourceKind
	err := row.Scan(&i.Meter, &i.NaturalID)
	return i, err
}

const deleteResourceKind = `-- name: DeleteResourceKind :exec
DELETE FROM resource_kind
WHERE meter = $1 AND natural_id = $2
`

type DeleteResourceKindParams struct {
	Meter     string
	NaturalID string
}

func (q *Queries) DeleteResourceKind(ctx context.Context, arg DeleteResourceKindParams) error {
	_, err := q.db.Exec(ctx, deleteResourceKind, arg.Meter, arg.NaturalID)
	return err
}

const getResourceKind = `-- name: GetResourceKind :one
SELECT meter, natural_id FROM resource_kind
WHERE meter = $1 AND natural_id = $2 LIMIT 1
`

type GetResourceKindParams struct {
	Meter     string
	NaturalID string
}

func (q *Queries) GetResourceKind(ctx context.Context, arg GetResourceKindParams) (ResourceKind, error) {
	row := q.db.QueryRow(ctx, getResourceKind, arg.Meter, arg.NaturalID)
	var i ResourceKind
	err := row.Scan(&i.Meter, &i.NaturalID)
	return i, err
}

const listResourceKind = `-- name: ListResourceKind :many
SELECT meter, natural_id FROM resource_kind
ORDER BY natural_id
`

func (q *Queries) ListResourceKind(ctx context.Context) ([]ResourceKind, error) {
	rows, err := q.db.Query(ctx, listResourceKind)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResourceKind
	for rows.Next() {
		var i ResourceKind
		if err := rows.Scan(&i.Meter, &i.NaturalID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
