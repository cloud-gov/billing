// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: resource_kind.sql

package db

import (
	"context"
	"database/sql"
)

const createResourceKind = `-- name: CreateResourceKind :one
INSERT INTO resource_kind (
  natural_id, credits, amount, unit_of_measure
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, natural_id, credits, amount, unit_of_measure
`

type CreateResourceKindParams struct {
	NaturalID     sql.NullString
	Credits       sql.NullInt32
	Amount        sql.NullInt32
	UnitOfMeasure string
}

func (q *Queries) CreateResourceKind(ctx context.Context, arg CreateResourceKindParams) (ResourceKind, error) {
	row := q.db.QueryRowContext(ctx, createResourceKind,
		arg.NaturalID,
		arg.Credits,
		arg.Amount,
		arg.UnitOfMeasure,
	)
	var i ResourceKind
	err := row.Scan(
		&i.ID,
		&i.NaturalID,
		&i.Credits,
		&i.Amount,
		&i.UnitOfMeasure,
	)
	return i, err
}

const deleteResourceKind = `-- name: DeleteResourceKind :exec
DELETE FROM resource_kind
WHERE id = $1
`

func (q *Queries) DeleteResourceKind(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteResourceKind, id)
	return err
}

const getResourceKind = `-- name: GetResourceKind :one
SELECT id, natural_id, credits, amount, unit_of_measure FROM resource_kind
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetResourceKind(ctx context.Context, id int32) (ResourceKind, error) {
	row := q.db.QueryRowContext(ctx, getResourceKind, id)
	var i ResourceKind
	err := row.Scan(
		&i.ID,
		&i.NaturalID,
		&i.Credits,
		&i.Amount,
		&i.UnitOfMeasure,
	)
	return i, err
}

const listResourceKind = `-- name: ListResourceKind :many
SELECT id, natural_id, credits, amount, unit_of_measure FROM resource_kind
ORDER BY natural_id
`

func (q *Queries) ListResourceKind(ctx context.Context) ([]ResourceKind, error) {
	rows, err := q.db.QueryContext(ctx, listResourceKind)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResourceKind
	for rows.Next() {
		var i ResourceKind
		if err := rows.Scan(
			&i.ID,
			&i.NaturalID,
			&i.Credits,
			&i.Amount,
			&i.UnitOfMeasure,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResourceKind = `-- name: UpdateResourceKind :exec
UPDATE resource_kind
  set natural_id = $2,
  credits = $3,
  amount = $4,
  unit_of_measure = $5
  WHERE id = $1
`

type UpdateResourceKindParams struct {
	ID            int32
	NaturalID     sql.NullString
	Credits       sql.NullInt32
	Amount        sql.NullInt32
	UnitOfMeasure string
}

func (q *Queries) UpdateResourceKind(ctx context.Context, arg UpdateResourceKindParams) error {
	_, err := q.db.ExecContext(ctx, updateResourceKind,
		arg.ID,
		arg.NaturalID,
		arg.Credits,
		arg.Amount,
		arg.UnitOfMeasure,
	)
	return err
}
