// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tier.sql

package db

import (
	"context"
)

const createTier = `-- name: CreateTier :one
INSERT INTO tier (
  name, tier_credits
) VALUES (
  $1, $2
)
RETURNING id, name, tier_credits
`

type CreateTierParams struct {
	Name        string
	TierCredits int64
}

func (q *Queries) CreateTier(ctx context.Context, arg CreateTierParams) (Tier, error) {
	row := q.db.QueryRowContext(ctx, createTier, arg.Name, arg.TierCredits)
	var i Tier
	err := row.Scan(&i.ID, &i.Name, &i.TierCredits)
	return i, err
}

const deleteTier = `-- name: DeleteTier :exec
DELETE FROM tier
WHERE id = $1
`

func (q *Queries) DeleteTier(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTier, id)
	return err
}

const getTier = `-- name: GetTier :one
SELECT id, name, tier_credits FROM tier
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTier(ctx context.Context, id int32) (Tier, error) {
	row := q.db.QueryRowContext(ctx, getTier, id)
	var i Tier
	err := row.Scan(&i.ID, &i.Name, &i.TierCredits)
	return i, err
}

const listTiers = `-- name: ListTiers :many
SELECT id, name, tier_credits FROM tier
ORDER BY name
`

func (q *Queries) ListTiers(ctx context.Context) ([]Tier, error) {
	rows, err := q.db.QueryContext(ctx, listTiers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tier
	for rows.Next() {
		var i Tier
		if err := rows.Scan(&i.ID, &i.Name, &i.TierCredits); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTier = `-- name: UpdateTier :exec
UPDATE tier
  set name = $2,
  tier_credits = $3
  WHERE id = $1
`

type UpdateTierParams struct {
	ID          int32
	Name        string
	TierCredits int64
}

func (q *Queries) UpdateTier(ctx context.Context, arg UpdateTierParams) error {
	_, err := q.db.ExecContext(ctx, updateTier, arg.ID, arg.Name, arg.TierCredits)
	return err
}
