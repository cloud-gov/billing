// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: resource.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createResource = `-- name: CreateResource :one
INSERT INTO resource (
  natural_id, meter, kind_natural_id, cf_org_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, natural_id, meter, kind_natural_id, cf_org_id
`

type CreateResourceParams struct {
	NaturalID     string
	Meter         string
	KindNaturalID pgtype.Text
	CFOrgID       pgtype.UUID
}

func (q *Queries) CreateResource(ctx context.Context, arg CreateResourceParams) (Resource, error) {
	row := q.db.QueryRow(ctx, createResource,
		arg.NaturalID,
		arg.Meter,
		arg.KindNaturalID,
		arg.CFOrgID,
	)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.NaturalID,
		&i.Meter,
		&i.KindNaturalID,
		&i.CFOrgID,
	)
	return i, err
}

const deleteResource = `-- name: DeleteResource :exec
DELETE FROM resource
WHERE id = $1
`

func (q *Queries) DeleteResource(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteResource, id)
	return err
}

const getResource = `-- name: GetResource :one
SELECT id, natural_id, meter, kind_natural_id, cf_org_id FROM resource
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetResource(ctx context.Context, id int32) (Resource, error) {
	row := q.db.QueryRow(ctx, getResource, id)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.NaturalID,
		&i.Meter,
		&i.KindNaturalID,
		&i.CFOrgID,
	)
	return i, err
}

const getResourceByNaturalID = `-- name: GetResourceByNaturalID :one
SELECT id, natural_id, meter, kind_natural_id, cf_org_id FROM resource
WHERE meter = $1 AND natural_id = $2 LIMIT 1
`

type GetResourceByNaturalIDParams struct {
	Meter     string
	NaturalID string
}

func (q *Queries) GetResourceByNaturalID(ctx context.Context, arg GetResourceByNaturalIDParams) (Resource, error) {
	row := q.db.QueryRow(ctx, getResourceByNaturalID, arg.Meter, arg.NaturalID)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.NaturalID,
		&i.Meter,
		&i.KindNaturalID,
		&i.CFOrgID,
	)
	return i, err
}

const listResources = `-- name: ListResources :many
SELECT id, natural_id, meter, kind_natural_id, cf_org_id FROM resource
ORDER BY natural_id
`

func (q *Queries) ListResources(ctx context.Context) ([]Resource, error) {
	rows, err := q.db.Query(ctx, listResources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.NaturalID,
			&i.Meter,
			&i.KindNaturalID,
			&i.CFOrgID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResource = `-- name: UpdateResource :exec
UPDATE resource
  set meter = $2,
  natural_id = $3,
  kind_natural_id = $4,
  cf_org_id = $5
  WHERE id = $1
`

type UpdateResourceParams struct {
	ID            int32
	Meter         string
	NaturalID     string
	KindNaturalID pgtype.Text
	CFOrgID       pgtype.UUID
}

func (q *Queries) UpdateResource(ctx context.Context, arg UpdateResourceParams) error {
	_, err := q.db.Exec(ctx, updateResource,
		arg.ID,
		arg.Meter,
		arg.NaturalID,
		arg.KindNaturalID,
		arg.CFOrgID,
	)
	return err
}
