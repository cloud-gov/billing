// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: resource.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createResource = `-- name: CreateResource :one
INSERT INTO resource (
  natural_id, kind_id, cf_org_id
) VALUES (
  $1, $2, $3
)
RETURNING id, natural_id, kind_id, cf_org_id
`

type CreateResourceParams struct {
	NaturalID sql.NullString
	KindID    int32
	CFOrgID   uuid.UUID
}

func (q *Queries) CreateResource(ctx context.Context, arg CreateResourceParams) (Resource, error) {
	row := q.db.QueryRowContext(ctx, createResource, arg.NaturalID, arg.KindID, arg.CFOrgID)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.NaturalID,
		&i.KindID,
		&i.CFOrgID,
	)
	return i, err
}

const deleteResource = `-- name: DeleteResource :exec
DELETE FROM resource
WHERE id = $1
`

func (q *Queries) DeleteResource(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteResource, id)
	return err
}

const getResource = `-- name: GetResource :one
SELECT id, natural_id, kind_id, cf_org_id FROM resource
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetResource(ctx context.Context, id int32) (Resource, error) {
	row := q.db.QueryRowContext(ctx, getResource, id)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.NaturalID,
		&i.KindID,
		&i.CFOrgID,
	)
	return i, err
}

const listResources = `-- name: ListResources :many
SELECT id, natural_id, kind_id, cf_org_id FROM resource
ORDER BY natural_id
`

func (q *Queries) ListResources(ctx context.Context) ([]Resource, error) {
	rows, err := q.db.QueryContext(ctx, listResources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.NaturalID,
			&i.KindID,
			&i.CFOrgID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResource = `-- name: UpdateResource :exec
UPDATE resource
  set natural_id = $2,
  kind_id = $3,
  cf_org_id = $4
  WHERE id = $1
`

type UpdateResourceParams struct {
	ID        int32
	NaturalID sql.NullString
	KindID    int32
	CFOrgID   uuid.UUID
}

func (q *Queries) UpdateResource(ctx context.Context, arg UpdateResourceParams) error {
	_, err := q.db.ExecContext(ctx, updateResource,
		arg.ID,
		arg.NaturalID,
		arg.KindID,
		arg.CFOrgID,
	)
	return err
}
