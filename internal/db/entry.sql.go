// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: entry.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getEntry = `-- name: GetEntry :one
SELECT transaction_id, account_id, direction, amount_microcredits
FROM entry
WHERE transaction_id = $1 AND account_id = $2
`

type GetEntryParams struct {
	TransactionID int32
	AccountID     int32
}

func (q *Queries) GetEntry(ctx context.Context, arg GetEntryParams) (Entry, error) {
	row := q.db.QueryRow(ctx, getEntry, arg.TransactionID, arg.AccountID)
	var i Entry
	err := row.Scan(
		&i.TransactionID,
		&i.AccountID,
		&i.Direction,
		&i.AmountMicrocredits,
	)
	return i, err
}

const sumEntries = `-- name: SumEntries :many
SELECT
  sum(direction * amount_microcredits / 1e6)
FROM
  entry
`

// SumEntries calculates the sum of all entries in the ledger. If the result is not 0, a transaction is imbalanced.
func (q *Queries) SumEntries(ctx context.Context) ([]pgtype.Numeric, error) {
	rows, err := q.db.Query(ctx, sumEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Numeric
	for rows.Next() {
		var sum pgtype.Numeric
		if err := rows.Scan(&sum); err != nil {
			return nil, err
		}
		items = append(items, sum)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
