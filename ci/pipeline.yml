jobs:
  - name: set-self
    plan:
      - get: src
        trigger: true
      - set_pipeline: self
        file: src/ci/pipeline.yml

  - name: pull-request
    plan:
      - in_parallel:
          - get: pull-request
            version: every
            trigger: true
          - get: postgres
            params:
              format: oci
          - get: general-task
            params:
              format: oci
      - put: pull-request
        params:
          path: pull-request
          status: pending
      - task: go-checks
        file: pull-request/ci/partials/go-checks.yml
        input_mapping:
          src: pull-request
      - task: go-test-db
        privileged: true # Required for docker-in-docker.
        file: pull-request/ci/partials/go-test-db.yml
        input_mapping:
          src: pull-request

    on_failure:
      put: pull-request
      params:
        path: pull-request
        status: failure
    on_success:
      put: pull-request
      params:
        path: pull-request
        status: success

  - name: terraform-plan-billing-development
    plan:
      - in_parallel:
          - get: terraform-plugin-cache
            trigger: false
          - get: terraform-templates
            resource: src
            trigger: true
            passed: [set-self]
          - get: pipeline-tasks
          - get: general-task
      - load_var: short-ref
        file: terraform-templates/.git/short_ref
      - task: terraform-plan
        image: general-task
        file: terraform-templates/ci/terraform/terraform-apply.yml
        params: &tf-billing-development
          TERRAFORM_ACTION: plan
          TEMPLATE_SUBDIR: ci/terraform/stack
          STACK_NAME: billing-development # Where TF state will be stored
          S3_TFSTATE_BUCKET: ((tf-state-bucket))
          AWS_DEFAULT_REGION: ((aws-region))
          AWS_USE_FIPS_ENDPOINT: true
          CF_API_URL: ((dev-cf-api-url))
          CF_CLIENT_ID: ((deploy-billing-cf-client-id))
          CF_CLIENT_SECRET: ((deploy-billing-cf-client-secret-development))
          TF_UPDATE_PLUGIN_CACHE: true
          TF_VAR_base_domain: ((base-domain-development))
          TF_VAR_environment:
            CF_API_URL: ((dev-cf-api-url))
            CF_CLIENT_ID: ((billing-cf-client-id))
            CF_CLIENT_SECRET: ((billing-cf-client-secret-development))
            OIDC_ISSUER: ((oidc-issuer-development))
          TF_VAR_org_name: ((org-name))
          TF_VAR_path: ../../.. # terraform-templates, relative to TEMPLATE_SUBDIR, where terraform executes
          TF_VAR_short_ref: ((.:short-ref))
          TF_VAR_space_name: ((space-name))
      - put: terraform-plugin-cache
        params:
          file: updated-terraform-plugin-cache/cache.tar.gz

  - name: terraform-apply-billing-development
    plan:
      - in_parallel:
          - get: terraform-plugin-cache
            trigger: false
          - get: terraform-templates
            resource: src
            trigger: true
            passed: [terraform-plan-billing-development]
          - get: pipeline-tasks
          - get: general-task
      - task: terraform-apply
        image: general-task
        file: terraform-templates/ci/terraform/terraform-apply.yml
        params:
          <<: *tf-billing-development
          TF_UPDATE_PLUGIN_CACHE: false
          TERRAFORM_ACTION: apply
      - task: terraform-cleanup
        image: general-task
        file: terraform-templates/ci/terraform/terraform-cleanup.yml
        params:
          CF_API_URL: ((dev-cf-api-url))
          CF_CLIENT_ID: ((deploy-billing-cf-client-id))
          CF_CLIENT_SECRET: ((deploy-billing-cf-client-secret-development))

  - name: terraform-plan-billing-staging
    plan:
      - in_parallel:
          - get: terraform-plugin-cache
            trigger: false
          - get: terraform-templates
            resource: src
            trigger: true
            passed: [terraform-apply-billing-development]
          - get: pipeline-tasks
          - get: general-task
      - load_var: short-ref
        file: terraform-templates/.git/short_ref
      - task: terraform-plan
        image: general-task
        file: terraform-templates/ci/terraform/terraform-apply.yml
        params: &tf-billing-staging
          TERRAFORM_ACTION: plan
          TEMPLATE_SUBDIR: ci/terraform/stack
          STACK_NAME: billing-staging # Where TF state will be stored
          S3_TFSTATE_BUCKET: ((tf-state-bucket))
          AWS_DEFAULT_REGION: ((aws-region))
          AWS_USE_FIPS_ENDPOINT: true
          CF_API_URL: ((staging-cf-api-url))
          CF_CLIENT_ID: ((deploy-billing-cf-client-id))
          CF_CLIENT_SECRET: ((deploy-billing-cf-client-secret-staging))
          TF_UPDATE_PLUGIN_CACHE: false
          TF_VAR_base_domain: ((base-domain-staging))
          TF_VAR_environment:
            CF_API_URL: ((staging-cf-api-url))
            CF_CLIENT_ID: ((billing-cf-client-id))
            CF_CLIENT_SECRET: ((billing-cf-client-secret-staging))
            OIDC_ISSUER: ((oidc-issuer-staging))
          TF_VAR_org_name: ((org-name))
          TF_VAR_path: ../../.. # terraform-templates, relative to TEMPLATE_SUBDIR, where terraform executes
          TF_VAR_short_ref: ((.:short-ref))
          TF_VAR_space_name: ((space-name))

  - name: terraform-apply-billing-staging
    plan:
      - in_parallel:
          - get: terraform-plugin-cache
            trigger: false
          - get: terraform-templates
            resource: src
            trigger: true
            passed: [terraform-plan-billing-staging]
          - get: pipeline-tasks
          - get: general-task
      - task: terraform-apply
        image: general-task
        file: terraform-templates/ci/terraform/terraform-apply.yml
        params:
          <<: *tf-billing-staging
          TERRAFORM_ACTION: apply
      - task: terraform-cleanup
        image: general-task
        file: terraform-templates/ci/terraform/terraform-cleanup.yml
        params:
          CF_API_URL: ((staging-cf-api-url))
          CF_CLIENT_ID: ((deploy-billing-cf-client-id))
          CF_CLIENT_SECRET: ((deploy-billing-cf-client-secret-staging))

  - name: terraform-plan-billing-production
    plan:
      - in_parallel:
          - get: terraform-plugin-cache
            trigger: false
          - get: terraform-templates
            resource: src
            trigger: true
            passed: [terraform-apply-billing-staging]
          - get: pipeline-tasks
          - get: general-task
      - load_var: short-ref
        file: terraform-templates/.git/short_ref
      - task: terraform-plan
        image: general-task
        file: terraform-templates/ci/terraform/terraform-apply.yml
        params: &tf-billing-production
          TERRAFORM_ACTION: plan
          TEMPLATE_SUBDIR: ci/terraform/stack
          STACK_NAME: billing-production # Where TF state will be stored
          S3_TFSTATE_BUCKET: ((tf-state-bucket))
          AWS_DEFAULT_REGION: ((aws-region))
          AWS_USE_FIPS_ENDPOINT: true
          CF_API_URL: ((prod-cf-api-url))
          CF_CLIENT_ID: ((deploy-billing-cf-client-id))
          CF_CLIENT_SECRET: ((deploy-billing-cf-client-secret-production))
          TF_UPDATE_PLUGIN_CACHE: false
          TF_VAR_base_domain: ((base-domain-production))
          TF_VAR_environment:
            CF_API_URL: ((prod-cf-api-url))
            CF_CLIENT_ID: ((billing-cf-client-id))
            CF_CLIENT_SECRET: ((billing-cf-client-secret-production))
            OIDC_ISSUER: ((oidc-issuer-production))
          TF_VAR_org_name: ((org-name))
          TF_VAR_path: ../../.. # terraform-templates, relative to TEMPLATE_SUBDIR, where terraform executes
          TF_VAR_short_ref: ((.:short-ref))
          TF_VAR_space_name: ((space-name))

  - name: terraform-apply-billing-production
    plan:
      - in_parallel:
          - get: terraform-plugin-cache
            trigger: false
          - get: terraform-templates
            resource: src
            trigger: true
            passed: [terraform-plan-billing-production]
          - get: pipeline-tasks
          - get: general-task
      - task: terraform-apply
        image: general-task
        file: terraform-templates/ci/terraform/terraform-apply.yml
        params:
          <<: *tf-billing-production
          TERRAFORM_ACTION: apply
      - task: terraform-cleanup
        image: general-task
        file: terraform-templates/ci/terraform/terraform-cleanup.yml
        params:
          CF_API_URL: ((prod-cf-api-url))
          CF_CLIENT_ID: ((deploy-billing-cf-client-id))
          CF_CLIENT_SECRET: ((deploy-billing-cf-client-secret-production))

resources:
  - name: pipeline-tasks
    type: git
    source:
      commit_verification_keys: ((cloud-gov-pgp-keys))
      uri: https://github.com/cloud-gov/cg-pipeline-tasks.git
      branch: main

  - name: general-task
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: general-task
      aws_region: us-gov-west-1
      tag: latest

  - name: src
    type: git
    source:
      commit_verification_keys: ((cloud-gov-pgp-keys))
      uri: https://github.com/cloud-gov/billing.git
      branch: main

  - name: terraform-plugin-cache
    type: s3-iam
    source:
      bucket: ((terraform-cache-bucket))
      versioned_file: billing/cache.tar.gz
      region_name: ((aws-region))
      initial_version: "0"
      # Initial contents: An empty directory named 'plugin-cache'.
      # Terraform requires the cache directory to exist, even if empty.
      initial_content_binary: H4sIAHqo3GcAAyvIKU3PzNNNTkzOSNVnoA0wMDAwNzVVANNmENrAyARCQ4GCoYm5mbmhkYmhibGCgaGpqYkJg4IpjdyDAkqLSxKLgE7JSsxNLS7JyE/OSExJzcFUB1SWlobHHKg/4PQoGAWjYBQMcgAA4m+yIwAGAAA=

  - name: pull-request
    type: pull-request
    check_every: 1m
    source:
      repository: cloud-gov/billing
      access_token: ((cg-ci-bot-ghtoken))
      disable_forks: true

  - name: postgres
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: pages-postgres-v15
      aws_region: us-gov-west-1
      tag: latest

resource_types:
  - name: registry-image
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: registry-image-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: git
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: git-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: s3-iam
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: s3-resource
      aws_region: us-gov-west-1
      tag: latest

  - name: pull-request
    type: registry-image
    source:
      aws_access_key_id: ((ecr_aws_key))
      aws_secret_access_key: ((ecr_aws_secret))
      repository: github-pr-resource
      aws_region: us-gov-west-1
      tag: latest
