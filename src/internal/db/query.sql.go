// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBillableClass = `-- name: CreateBillableClass :one
INSERT INTO billable_class (
  native_id, credits, amount, unit_of_measure
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, native_id, credits, amount, unit_of_measure
`

type CreateBillableClassParams struct {
	NativeID      sql.NullString
	Credits       sql.NullInt32
	Amount        sql.NullInt32
	UnitOfMeasure string
}

func (q *Queries) CreateBillableClass(ctx context.Context, arg CreateBillableClassParams) (BillableClass, error) {
	row := q.db.QueryRowContext(ctx, createBillableClass,
		arg.NativeID,
		arg.Credits,
		arg.Amount,
		arg.UnitOfMeasure,
	)
	var i BillableClass
	err := row.Scan(
		&i.ID,
		&i.NativeID,
		&i.Credits,
		&i.Amount,
		&i.UnitOfMeasure,
	)
	return i, err
}

const createBillableResource = `-- name: CreateBillableResource :one
INSERT INTO billable_resource (
  native_id, class_id, cf_org_id
) VALUES (
  $1, $2, $3
)
RETURNING id, native_id, class_id, cf_org_id
`

type CreateBillableResourceParams struct {
	NativeID sql.NullString
	ClassID  sql.NullString
	CfOrgID  uuid.NullUUID
}

func (q *Queries) CreateBillableResource(ctx context.Context, arg CreateBillableResourceParams) (BillableResource, error) {
	row := q.db.QueryRowContext(ctx, createBillableResource, arg.NativeID, arg.ClassID, arg.CfOrgID)
	var i BillableResource
	err := row.Scan(
		&i.ID,
		&i.NativeID,
		&i.ClassID,
		&i.CfOrgID,
	)
	return i, err
}

const createCF_org = `-- name: CreateCF_org :one
INSERT INTO cf_org (
  name, tier_id, credits_quota, credits_used, customer_id
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, name, tier_id, credits_quota, credits_used, customer_id
`

type CreateCF_orgParams struct {
	Name         string
	TierID       string
	CreditsQuota int64
	CreditsUsed  int64
	CustomerID   int64
}

func (q *Queries) CreateCF_org(ctx context.Context, arg CreateCF_orgParams) (CfOrg, error) {
	row := q.db.QueryRowContext(ctx, createCF_org,
		arg.Name,
		arg.TierID,
		arg.CreditsQuota,
		arg.CreditsUsed,
		arg.CustomerID,
	)
	var i CfOrg
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TierID,
		&i.CreditsQuota,
		&i.CreditsUsed,
		&i.CustomerID,
	)
	return i, err
}

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (
  id, name
) VALUES (
  $1, $2
)
RETURNING id, name
`

type CreateCustomerParams struct {
	ID   int64
	Name string
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer, arg.ID, arg.Name)
	var i Customer
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createTier = `-- name: CreateTier :one
INSERT INTO tier (
  name, tier_credits
) VALUES (
  $1, $2
)
RETURNING id, name, tier_credits
`

type CreateTierParams struct {
	Name        string
	TierCredits sql.NullInt64
}

func (q *Queries) CreateTier(ctx context.Context, arg CreateTierParams) (Tier, error) {
	row := q.db.QueryRowContext(ctx, createTier, arg.Name, arg.TierCredits)
	var i Tier
	err := row.Scan(&i.ID, &i.Name, &i.TierCredits)
	return i, err
}

const deleteBillableClass = `-- name: DeleteBillableClass :exec
DELETE FROM billable_class
WHERE id = $1
`

func (q *Queries) DeleteBillableClass(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBillableClass, id)
	return err
}

const deleteBillableResouce = `-- name: DeleteBillableResouce :exec
DELETE FROM billable_resource
WHERE id = $1
`

func (q *Queries) DeleteBillableResouce(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBillableResouce, id)
	return err
}

const deleteCF_org = `-- name: DeleteCF_org :exec
DELETE FROM cf_org
WHERE id = $1
`

func (q *Queries) DeleteCF_org(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCF_org, id)
	return err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customer
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const deleteTier = `-- name: DeleteTier :exec
DELETE FROM tier
WHERE id = $1
`

func (q *Queries) DeleteTier(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTier, id)
	return err
}

const getBillableClass = `-- name: GetBillableClass :one
SELECT id, native_id, credits, amount, unit_of_measure FROM billable_class
WHERE id = $1 LIMIT 1
`

// START Billable Class
func (q *Queries) GetBillableClass(ctx context.Context, id int32) (BillableClass, error) {
	row := q.db.QueryRowContext(ctx, getBillableClass, id)
	var i BillableClass
	err := row.Scan(
		&i.ID,
		&i.NativeID,
		&i.Credits,
		&i.Amount,
		&i.UnitOfMeasure,
	)
	return i, err
}

const getBillableResource = `-- name: GetBillableResource :one
SELECT id, native_id, class_id, cf_org_id FROM billable_resource
WHERE id = $1 LIMIT 1
`

// START billable resource
func (q *Queries) GetBillableResource(ctx context.Context, id int32) (BillableResource, error) {
	row := q.db.QueryRowContext(ctx, getBillableResource, id)
	var i BillableResource
	err := row.Scan(
		&i.ID,
		&i.NativeID,
		&i.ClassID,
		&i.CfOrgID,
	)
	return i, err
}

const getCF_Org = `-- name: GetCF_Org :one
SELECT id, name, tier_id, credits_quota, credits_used, customer_id FROM cf_org
WHERE id = $1 LIMIT 1
`

// START CF_ORG
func (q *Queries) GetCF_Org(ctx context.Context, id uuid.UUID) (CfOrg, error) {
	row := q.db.QueryRowContext(ctx, getCF_Org, id)
	var i CfOrg
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TierID,
		&i.CreditsQuota,
		&i.CreditsUsed,
		&i.CustomerID,
	)
	return i, err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, name FROM customer
WHERE id = $1 LIMIT 1
`

// Start Customer
func (q *Queries) GetCustomer(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getTier = `-- name: GetTier :one
SELECT id, name, tier_credits FROM tier
WHERE id = $1 LIMIT 1
`

// START Tier
func (q *Queries) GetTier(ctx context.Context, id int32) (Tier, error) {
	row := q.db.QueryRowContext(ctx, getTier, id)
	var i Tier
	err := row.Scan(&i.ID, &i.Name, &i.TierCredits)
	return i, err
}

const listBillableClass = `-- name: ListBillableClass :many
SELECT id, native_id, credits, amount, unit_of_measure FROM billable_class
ORDER BY native_id
`

func (q *Queries) ListBillableClass(ctx context.Context) ([]BillableClass, error) {
	rows, err := q.db.QueryContext(ctx, listBillableClass)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BillableClass
	for rows.Next() {
		var i BillableClass
		if err := rows.Scan(
			&i.ID,
			&i.NativeID,
			&i.Credits,
			&i.Amount,
			&i.UnitOfMeasure,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBillableResources = `-- name: ListBillableResources :many
SELECT id, native_id, class_id, cf_org_id FROM billable_resource
ORDER BY native_id
`

func (q *Queries) ListBillableResources(ctx context.Context) ([]BillableResource, error) {
	rows, err := q.db.QueryContext(ctx, listBillableResources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BillableResource
	for rows.Next() {
		var i BillableResource
		if err := rows.Scan(
			&i.ID,
			&i.NativeID,
			&i.ClassID,
			&i.CfOrgID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCF_orgs = `-- name: ListCF_orgs :many
SELECT id, name, tier_id, credits_quota, credits_used, customer_id FROM cf_org
ORDER BY name
`

func (q *Queries) ListCF_orgs(ctx context.Context) ([]CfOrg, error) {
	rows, err := q.db.QueryContext(ctx, listCF_orgs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CfOrg
	for rows.Next() {
		var i CfOrg
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TierID,
			&i.CreditsQuota,
			&i.CreditsUsed,
			&i.CustomerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, name FROM customer
ORDER BY name
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTiers = `-- name: ListTiers :many
SELECT id, name, tier_credits FROM tier
ORDER BY name
`

func (q *Queries) ListTiers(ctx context.Context) ([]Tier, error) {
	rows, err := q.db.QueryContext(ctx, listTiers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tier
	for rows.Next() {
		var i Tier
		if err := rows.Scan(&i.ID, &i.Name, &i.TierCredits); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBillableClass = `-- name: UpdateBillableClass :exec
UPDATE billable_class
  set native_id = $2,
  credits = $3,
  amount = $4,
  unit_of_measure = $5
  WHERE id = $1
`

type UpdateBillableClassParams struct {
	ID            int32
	NativeID      sql.NullString
	Credits       sql.NullInt32
	Amount        sql.NullInt32
	UnitOfMeasure string
}

func (q *Queries) UpdateBillableClass(ctx context.Context, arg UpdateBillableClassParams) error {
	_, err := q.db.ExecContext(ctx, updateBillableClass,
		arg.ID,
		arg.NativeID,
		arg.Credits,
		arg.Amount,
		arg.UnitOfMeasure,
	)
	return err
}

const updateBillableResource = `-- name: UpdateBillableResource :exec
UPDATE billable_resource
  set native_id = $2,
  class_id = $3,
  cf_org_id = $4
  WHERE id = $1
`

type UpdateBillableResourceParams struct {
	ID       int32
	NativeID sql.NullString
	ClassID  sql.NullString
	CfOrgID  uuid.NullUUID
}

func (q *Queries) UpdateBillableResource(ctx context.Context, arg UpdateBillableResourceParams) error {
	_, err := q.db.ExecContext(ctx, updateBillableResource,
		arg.ID,
		arg.NativeID,
		arg.ClassID,
		arg.CfOrgID,
	)
	return err
}

const updateCF_org = `-- name: UpdateCF_org :exec
UPDATE cf_org
  set name = $2,
  tier_id = $3,
  credits_quota = $4,
  credits_used = $5
WHERE id = $1
`

type UpdateCF_orgParams struct {
	ID           uuid.UUID
	Name         string
	TierID       string
	CreditsQuota int64
	CreditsUsed  int64
}

func (q *Queries) UpdateCF_org(ctx context.Context, arg UpdateCF_orgParams) error {
	_, err := q.db.ExecContext(ctx, updateCF_org,
		arg.ID,
		arg.Name,
		arg.TierID,
		arg.CreditsQuota,
		arg.CreditsUsed,
	)
	return err
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customer
  set name = $2
WHERE id = $1
`

type UpdateCustomerParams struct {
	ID   int64
	Name string
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomer, arg.ID, arg.Name)
	return err
}

const updateTier = `-- name: UpdateTier :exec
UPDATE tier
  set name = $2,
  tier_credits = $3
  WHERE id = $1
`

type UpdateTierParams struct {
	ID          int32
	Name        string
	TierCredits sql.NullInt64
}

func (q *Queries) UpdateTier(ctx context.Context, arg UpdateTierParams) error {
	_, err := q.db.ExecContext(ctx, updateTier, arg.ID, arg.Name, arg.TierCredits)
	return err
}
